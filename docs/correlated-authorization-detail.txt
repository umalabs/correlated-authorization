participant "IdP + STS" as IdP-STS
participant "Client" as Client
participant "RP" as RP

bottomparticipants

note over IdP-STS:IdP + STS:\n• both act as the same authority
note over Client:Client:\n• runs as a service with its own URI\n• client generates its own public and private key pair to sign assertions and authenticate to RPs\n• public keys are published at the clients well-known URI\n• client_id is the client URI\n• uses a JWT client authentication to authenticate to RPs\n• is registered at IdP as a confidential client\n• acts as a Relying Party in respect of the IdP in order to obtain an access_token_with_user_claims\n• acts as a token forwarder that forwards tokens from the STS to the RP
note over RP:RP:\n• is a resource server using the local ABAC engine to automate authorization assessment
Client->Client:1. Client generates the resource_claims_token with these claims:\n    {iss, aud, sub, exp, nbf}\n    iss is the URI that identifies who issues the resource_claims_token\n    aud is the URI that identifies the requested resource\n    sub is the client_id\n    exp, nbf are the standard JWT claims
IdP-STS<-Client:2. Request an identity_claims_token (token exchange request)\n    {grant_type = token-exchange,\n     requested_token_type = urn:ietf:params:oauth:token-type:jwt,\n     subject_token = access_token_with_user_claims,\n     subject_token_type = urn:ietf:params:oauth:token-type:access_token,\n     actor_token = resource_claims_token,\n     actor_token_type = urn:ietf:params:oauth:token-type:jwt}
IdP-STS->IdP-STS:3. Authorization assessment\n    1. verify the subject_token signature\n    2. evaluate the subject_token claims\n    3. verify the resource_claims_token signature\n    4. evaluate the resource claims 

IdP-STS->IdP-STS:4. STS generates the identity_claims_token with these claims:\n    {iss, aud, sub, exp, nbf, act{sub}}\n    iss is the URI that identifies who issues the identity_claims_token\n    aud identifies the target service and it is the aud claim value extracted from the resource_claims_token\n    sub identifies the principal by email address and was extracted from the access_token_with_user_claims\n    exp, nbf are the standard JWT claims\n    act{sub} is the sub value extracted from the resource_claims_token
Client<-IdP-STS:5. Return the identity_claims_token in the access_token parameter,\n    issued_token_type = urn:ietf:params:oauth:token-type:jwt

Client->RP:6. Send HTTP request to resource_uri with the identity_claims_token,\n    and generates the authentication JWT with these claims:\n    {iss, sub, aud, exp, nbf}\n    iss is the URI that identifies who issues the authentication token\n    aud is the URI that identifies the requested resource\n    sub is the client_id\n    exp, nbf are the standard JWT claims
iss is the URI that identifies who issues the authentication token
RP->RP:7. Authorization assessment\n    1. verify the identity_claims_token signature\n    2. evaluate the identity claims
RP->Client:8. Return HTTP response, typically with 200, 201 status code
