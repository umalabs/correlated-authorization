participant "AuthZ Server – Requesting Party (AS-RqP)" as AS-RqP
participant "Client" as Client
participant "Resource Server (RS)" as RS
participant "AuthZ Server – Resource Owner (AS-RO)" as AS-RO

bottomparticipants

note over AS-RqP:AS-RqP:\n• supports the token exchange extension of OAuth2\n• publishes its metadata on a URL /.well-known/oauth-authorization-server\n• also acts as RqP's Identity Provider
note over Client:Client:\n• is registered at AS-RqP as a public or confidential client\n• acts as a Relying Party in a RqP's Identity Provider in order to obtain an an access_token_with_user_claims\n• should be registered at AS-RO as a public or confidential client; in case of immediate access,\n   the client does not have to be registered at AS-RO
note over RS:RO has set up RS and registers its 'RS API' resource at AS-RO
RS<-Client:1. Request 'RS API' resource with no access token
RS->AS-RO:2. Request a permission ticket
note over AS-RO: AS-RO generates a permission ticket itself and the bound permission token\n(bound to the permission ticket via token hash), which contains these claims:\n{issuer, ts, ticket_hash, rs_uri}\nwhere\nticket is a random NONCE\nissuer is the URI that identifies who issues the permission token\nts is the timestamp of when the permission ticket was created\nticket_hash = Base64URL-Encode(SHA256(ticket))\nrs_uri is the URI that identifies the resource server
RS<-AS-RO:3. Return the permission ticket and the permission token
RS->Client:4. Return 401 with the permission ticket and the permission token
AS-RqP<-Client:5. Request a claims token (token exchange request)\n    {grant_type = token-exchange,\n     resource = "RS API",\n     scope = permission_token,\n     subject_token = access_token_with_user_claims,\n     subject_token_type = urn:ietf:params:oauth:token-type:access_token,\n     requested_token_type = urn:ietf:params:oauth:token-type:jwt}
group Authorization assessment
note over AS-RqP:1. verify permission_token\n2. evaluate issuer, ts and rs_uri
end
note over AS-RqP:AS-RqP generates a claim token, which contains these claims:\n{user_claims, ticket_hash}\nwhere\nuser_claims are extracted from access_token_with_user_claims\nticket_hash is extracted from permission_token
Client<-AS-RqP:6. Return claims token\n    {claims_token}

Client->AS-RO:7. Request a Requesting Party Token (RPT)\n    {grant_type = uma-ticket,\n     pushed_claims = claims_token}
group Authorization assessment
note over AS-RO:1. verify ticket\n2. extract user_claims from claims_token\n3. select email_address claim\n4. bootstrap discovery of AS-RqP config url from email address via WebFinger;\n    if this doesn't work, build well-known url using domain part of email_address\n5. verify claims_token signature\n6. evaluate resource = "RS API"\n7. extract ticket_hash scope from claims_token\n8. compare ticket_hash vs. Base64URL-Encode(SHA256(ticket))\n9. evaluate user_claims
end
Client<-AS-RO:8. Return RPT\n    {RPT}
RS<-Client:9. Get data from 'RS API' resource\n    {RPT}
RS->Client:10. Return protected resource