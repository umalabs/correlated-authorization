participant "AuthZ Server – Requesting Party (AS-RqP)" as AS-RqP
participant "Client" as Client
participant "Resource Server (RS)" as RS
participant "AuthZ Server – Resource Owner (AS-RO)" as AS-RO

bottomparticipants

note over AS-RqP:AS-RqP:\n• supports the token exchange extension of OAuth2 as an STS service\n• publishes its metadata on a URL /.well-known/oauth-authorization-server\n• also acts as RqP's Identity Provider
note over Client:Client:\n• is registered at AS-RqP as a public or confidential client\n• acts as a Relying Party in a RqP's Identity Provider in order to obtain an access_token_with_user_claims\n• is registered at AS-RO as a public or confidential client
note over RS:RO has set up the RS, registers the resources at the AS-RO and sets policies
RS<-Client:1. Send HTTP request to the resource_uri with no access token
RS->AS-RO:2. Request a permission_ticket and resource_claims_token\n{PAT}
note over AS-RO: AS-RO generates the permission_ticket (a random NONCE value in the JWT sub claim)\nand the resource_claims_token which is bound to the permission_ticket through the permission_ticket sub claim hash.\nThe resource_claims_token contains these claims:\n{iss, aud, sub, exp, nbf}\niss is the URI that identifies who issues the resource_claims_token\naud is the URI that identifies the requested resource\nsub is the permission_ticket sub claim hash computed as Base64URL-Encode(SHA256(permission_ticket{sub})\nexp, nbf are the standard JWT claims)
RS<-AS-RO:3. Return the permission_ticket, resource_claims_token,\n    issued_token_type = urn:ietf:params:oauth:token-type:jwt
RS->Client:4. Return 401 with the permission_ticket, resource_claims_token,\n    issued_token_type = urn:ietf:params:oauth:token-type:jwt
AS-RqP<-Client:5. Request an identity_claims_token (token exchange request)\n    {grant_type = token-exchange,\n     requested_token_type = urn:ietf:params:oauth:token-type:jwt,\n     subject_token = access_token_with_user_claims,\n     subject_token_type = urn:ietf:params:oauth:token-type:access_token,\n     actor_token = resource_claims_token,\n     actor_token_type = urn:ietf:params:oauth:token-type:jwt}
group Trust assessment – evaluate the resource provenance / ownership
note over AS-RqP:1. evaluate the subject_token\n2. verify the resource_claims_token signature\n3. evaluate the resource claims 
end
note over AS-RqP:AS-RqP generates the identity_claims_token, which contains these claims:\n{iss, aud, sub, exp, nbf, act{sub}}\niss is the URI that identifies who issues the identity_claims_token\naud identifies the target service and it is the iss claim value extracted from resource_claims_token\nsub identifies the principal by email address and was extracted from access_token_with_user_claims\nexp, nbf are the standard JWT claims\nact{sub} is the sub value extracted from resource_claims_token
Client<-AS-RqP:6. Return the identity_claims_token in the access_token parameter,\n    issued_token_type = urn:ietf:params:oauth:token-type:jwt

Client->AS-RO:7. Request a Requesting Party Token (RPT)\n    {grant_type = uma-ticket,\n     ticket = permission_ticket,\n     claim_token = identity_claims_token,\n     claim_token_format = urn:ietf:params:oauth:token-type:jwt}
group Trust assessment – evaluate the RqP identity provenance / ownership
note over AS-RO:1. verify the permission_ticket\n2. verify the aud claim from identity_claims_token\n3. select sub, the email address of pricipal, from identity_claims_token\n4. bootstrap discovery of AS-RqP url from email address via WebFinger;\n    if this doesn't work, build well-known url using domain part of email_address\n5. compare AS-RqP url with the iss claim from identity_claims_token\n6. verify the identity_claims_token signature\n7. extract act{sub} claim from identity_claims_token\n8. compare act{sub} vs. Base64URL-Encode(SHA256(permission_ticket{sub}))
end
Client<-AS-RO:8. Return RPT, optionally a refresh token\n    {RPT}
RS<-Client:9. Send HTTP request to resource_uri\n    {RPT}
RS->Client:10. Return HTTP response, typically with 200, 201 status code
