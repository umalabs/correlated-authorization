participant "AuthZ Server – Requesting Party (AS-RqP)" as AS-RqP
participant "Client" as Client
participant "Resource Server (RS)" as RS
participant "AuthZ Server – Resource Owner (AS-RO)" as AS-RO

bottomparticipants

note over AS-RqP:AS-RqP:\n• supports the token exchange extension of OAuth2\n• publishes its metadata on a URL /.well-known/oauth-authorization-server\n• also acts as RqP's Identity Provider
note over Client:Client:\n• is registered at AS-RqP as a public or confidential client\n• acts as a Relying Party in a RqP's Identity Provider in order to obtain an an access_token_with_user_claims\n• is registered at AS-RO as a public or confidential client
note over RS:RO has set up RS and registers his resource at AS-RO to get resource_uri and sets policies\nto the resource sets with the authorization server to indicate who can access the resources.
RS<-Client:1. Send HTTP request to resource_uri with no access token
RS->AS-RO:2. Request a permission ticket\n{PAT}
note over AS-RO: AS-RO generates the permission ticket itself (ticket is a random NONCE) and the resource claims token,\nwhich is bound to the permission ticket through a permission ticket hash.\nThe resource claims token contains these claims:\n{issuer, ts, audience, email_address, resource_uri_hash, permission_ticket_hash}\nwhere\nissuer is the URI that identifies who issues the resource claims token\nts is the timestamp of when the permission ticket was created\naudience is the URI that identifies the resource server\nemail_address is the email address of the resource owner\nresource_uri_hash = Base64URL-Encode(SHA256(resource_uri))\npermission_ticket_hash = Base64URL-Encode(SHA256(permission_ticket))
RS<-AS-RO:3. Return the permission ticket and the resource claims token
RS->Client:4. Return 401 with the permission ticket and the resource claims token
AS-RqP<-Client:5. Request an identity claims token (token exchange request)\n    {grant_type = token-exchange,\n     resource = resource_uri,\n     scope = resource_claims_token,\n     subject_token = access_token_with_user_claims,\n     subject_token_type = urn:ietf:params:oauth:token-type:access_token,\n     requested_token_type = urn:ietf:params:oauth:token-type:jwt}
group Authorization assessment
note over AS-RqP:1. verify resource_claims_token signature\n2. extract resource_uri_hash claim from resource_claims_token\n3. compare resource_uri_hash vs. Base64URL-Encode(SHA256(resource_uri))\n4. evaluate provenance of the resource URI using issuer, ts, audience, email_address, resource_uri claims
end
note over AS-RqP:AS-RqP generates the identity claims token, which contains these claims:\n{user_claims, permission_ticket_hash}\nwhere\nuser_claims are extracted from access_token_with_user_claims\npermission_ticket_hash is extracted from resource_claims_token
Client<-AS-RqP:6. Return the identity claims token\n    {identity_claims_token}

Client->AS-RO:7. Request a Requesting Party Token (RPT)\n    {grant_type = uma-ticket,\n     ticket = ticket,\n     claim_token = identity_claims_token}
group Authorization assessment
note over AS-RO:1. verify permission_ticket\n2. extract user_claims from identity_claims_token\n3. select email_address claim\n4. bootstrap discovery of AS-RqP config url from email address via WebFinger;\n    if this doesn't work, build well-known url using domain part of email_address\n5. verify identity_claims_token signature\n6. evaluate resource_uri\n7. extract permission_ticket_hash claim from identity_claims_token\n8. compare permission_ticket_hash vs. Base64URL-Encode(SHA256(permission_ticket))\n9. evaluate user_claims
end
Client<-AS-RO:8. Return RPT\n    {RPT}
RS<-Client:9. Send HTTP request to resource_uri\n    {RPT}
RS->Client:10. Return HTTP response typically with 200, 201 status code
